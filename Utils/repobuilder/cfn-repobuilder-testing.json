{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "Stage salt packages and dependencies to S3 bucket, and create yum package metadata and repo files",
    "Parameters" :
    {
        "AmiId" :
        {
            "Type" : "String",
            "Default" : "",
            "Description" : "AMI to use when executing repobuilder scripts, must be HVM (template uses the t2.micro instance type)"
        },
        "BucketName" :
        {
            "Type" : "String",
            "Default" : "",
            "Description" : "Name of the S3 bucket that will host the systemprep packages and dependencies"
        },
        "InstanceType" :
        {
            "Type" : "String",
            "Description" : "The instance type to deploy. Only t2.micro allowed.",
            "Default" : "t2.micro",
            "AllowedValues" : [ "t2.micro" ],
            "ConstraintDescription" : "Only t2.micro is allowed."
        },
        "IamProfileName" :
        {
            "Type" : "String",
            "Description" : "Name of the IAM profile/role to assign to the instances. This role must have permissions to read/write the bucket specified by \"BucketName\"",
            "Default" : ""
        },
        "SecurityGroupId" :
        {
            "Type" : "AWS::EC2::SecurityGroup::Id",
            "Description" : "ID of the security group to assign to the instances.",
            "Default" : ""
        },
        "SubnetId" :
        {
            "Type" : "AWS::EC2::Subnet::Id",
            "Description" : "ID of the subnet to assign to the instances. Change this value when updating the stack to force new instances to be deployed, which will cause updated packages to be pushed to the S3 bucket.",
            "Default" : ""
        },
        "KeyName" :
        {
            "Type" : "AWS::EC2::KeyPair::KeyName",
            "Description" : "Name of the key pair to assign to the instances.",
            "Default" : ""
        }
    },
    "Resources" :
    {
        "Ec2Instance" :
        {
            "Type" : "AWS::EC2::Instance",
            "CreationPolicy" :
            {
                "ResourceSignal" :
                {
                    "Count" : "1",
                    "Timeout" : "PT30M"
                }
            },
            "Properties" :
            {
                "ImageId" : { "Ref" : "AmiId" },
                "Tags" :
                [
                    {
                        "Key" : "Name",
                        "Value" : { "Ref" : "AWS::StackName" }
                    }
                ],
                "InstanceType" : { "Ref" : "InstanceType" },
                "IamInstanceProfile" : { "Ref" : "IamProfileName" },
                "SecurityGroupIds" : [{ "Ref" : "SecurityGroupId" }],
                "SubnetId" : { "Ref" : "SubnetId" },
                "KeyName" : { "Ref" : "KeyName" },
                "BlockDeviceMappings" :
                [
                    {
                        "DeviceName" : "/dev/xvda",
                        "Ebs" :
                        {
                            "VolumeType" : "gp2",
                            "DeleteOnTermination" : "true"
                        }
                    }
                ],
                "UserData" :
                { "Fn::Base64" : { "Fn::Join" : [ "", [
                    "#!/bin/bash -x\n\n",

                    "# Get pip\n",
                    "curl --silent --show-error --retry 5 -L ",
                    "https://bootstrap.pypa.io/get-pip.py ",
                    "| python", "\n\n",

                    "# Add pip to path\n",
                    "hash pip 2> /dev/null || ",
                    "PATH=\"${PATH}:/usr/local/bin\"", "\n\n",

                    "# Upgrade setuptools\n",
                    "pip install --upgrade setuptools\n\n",

                    "# Fix python urllib3 warnings\n",
                    "yum -y install gcc python-devel libffi-devel openssl-devel\n",
                    "pip install --upgrade pyopenssl ndg-httpsclient pyasn1\n\n",

                    "# Get cfn utils\n",
                    "pip install ",
                    "https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz",
                    "\n\n",

                    "# Remove gcc now that it is no longer needed\n",
                    "yum -y remove gcc --setopt=clean_requirements_on_remove=1\n\n",

                    "# Fixup cfn utils\n",
                    "INITDIR=$(find -L /opt/aws/apitools/cfn-init/init -name redhat ",
                    "2> /dev/null || echo /usr/init/redhat)\n",
                    "chmod 775 ${INITDIR}/cfn-hup\n",
                    "ln -f -s ${INITDIR}/cfn-hup /etc/rc.d/init.d/cfn-hup\n",
                    "chkconfig --add cfn-hup\n",
                    "chkconfig cfn-hup on\n",
                    "mkdir -p /opt/aws/bin\n",
                    "BINDIR=$(find -L /opt/aws/apitools/cfn-init -name bin ",
                    "2> /dev/null || echo /usr/bin)\n",
                    "for SCRIPT in cfn-elect-cmd-leader cfn-get-metadata cfn-hup ",
                    "cfn-init cfn-send-cmd-event cfn-send-cmd-result cfn-signal\n",
                    "do\n",
                    "    ln -s ${BINDIR}/${SCRIPT} /opt/aws/bin/${SCRIPT} 2> /dev/null || ",
                    "    echo Skipped symbolic link, /opt/aws/bin/${SCRIPT} already exists\n",
                    "done\n\n",

                    "# Add cfn-signal to path\n",
                    "hash cfn-signal 2> /dev/null || ",
                    "PATH=\"${PATH}:/usr/local/bin:/opt/aws/bin\"",
                    "\n\n",

                    "# Run the script",
                    "#curl --silent --show-error --retry 5 -L ",
                    "https://raw.githubusercontent.com/plus3it/SystemPrep/master/Utils/repobuilder/sync-salt-repo.sh ",
                    "| bash -s -- ", { "Ref" : "BucketName" }, "\n\n",
                    "result=$?  # Store the exit code of the script\n",
                    "echo result = $result\n\n",

                    "# Send cfn-signal with the result of the script\n",
                    "cfn-signal -e $result --stack ", { "Ref" : "AWS::StackName" },
                    " --resource Ec2Instance\n\n",

                    "# Shut it down",
                    "#shutdown -h +1 &\n"
                ]]}}
            }
        }
    },
    "Outputs" :
    {
        "InstanceId" :
        {
            "Value" : { "Ref" : "Ec2Instance" },
            "Description" : "Id of repobuilder instance"
        }
    }
}
